"0","#Seleccionamos una submuestra para evitar tiempos muy largos de cálculo"
"0","df <- data[1:30000,c(4,6,8)]"
"0","df <- df[sample(nrow(df)),]  # shuffle"
"0",""
"0","df.train <- df[1:15000,]"
"0","df.test <- df[15001:30000,]"
"0",""
"0","BST = gbm(Country~.,data=df.train,"
"0","          distribution='multinomial',"
"0","          n.trees=200,"
"0","          interaction.depth=4,"
"0","          #cv.folds=5,"
"0","          shrinkage=0.005)"
"2","Setting `distribution = ""multinomial""` is ill-advised as it is currently broken. It exists only for backwards compatibility. Use at your own risk."
"0","# La variable dependiente tiene varias categorias y usamos ""multinomial""."
"0","predBST = predict(BST,n.trees=200, newdata=df.test,type='response')"
"0","pred=as.matrix(predBST[,,1])"
"0","# La funci�n which.max elige la categoria con la probabilidad m�s alta. "
"0","p.predBST <- apply(predBST, 1, which.max)"
"0","# Añadimos nombres de categorias."
"0","p.predcat <- colnames(predBST)[p.predBST]"
"0",""
"0","table(p.predcat,df.test$Country)"
"1","                
"
"1","p.predcat       "
"1"," Australia"
"1"," Austria"
"1"," Bahrain"
"1"," Belgium"
"1"," Brazil"
"1"," Canada"
"1"," Channel Islands"
"1"," Cyprus"
"1","
  France        "
"1","         0"
"1","       0"
"1","       0"
"1","       0"
"1","      0"
"1","      0"
"1","               0"
"1","      0"
"1","
  Germany       "
"1","         0"
"1","       0"
"1","       0"
"1","       0"
"1","      0"
"1","      0"
"1","               0"
"1","      0"
"1","
  United Kingdom"
"1","        48"
"1","       3"
"1","       0"
"1","      47"
"1","      0"
"1","      0"
"1","               8"
"1","     39"
"1","
"
"1","                
"
"1","p.predcat       "
"1"," Czech Republic"
"1"," Denmark"
"1","  EIRE"
"1"," European Community"
"1"," Finland"
"1"," France"
"1"," Germany"
"1","
  France        "
"1","              0"
"1","       0"
"1","     0"
"1","                  0"
"1","       0"
"1","      5"
"1","      12"
"1","
  Germany       "
"1","              0"
"1","       0"
"1","     0"
"1","                  0"
"1","       0"
"1","      0"
"1","       2"
"1","
  United Kingdom"
"1","              0"
"1","       8"
"1","   176"
"1","                  0"
"1","       9"
"1","    316"
"1","     337"
"1","
"
"1","                
"
"1","p.predcat       "
"1"," Greece"
"1"," Iceland"
"1"," Israel"
"1"," Italy"
"1"," Japan"
"1"," Lebanon"
"1"," Lithuania"
"1"," Malta"
"1"," Netherlands"
"1","
  France        "
"1","      0"
"1","       0"
"1","      0"
"1","     0"
"1","     0"
"1","       0"
"1","         0"
"1","     0"
"1","           0"
"1","
  Germany       "
"1","      0"
"1","       0"
"1","      0"
"1","     0"
"1","     0"
"1","       0"
"1","         0"
"1","     0"
"1","           0"
"1","
  United Kingdom"
"1","      0"
"1","      20"
"1","      0"
"1","    22"
"1","    32"
"1","       0"
"1","        19"
"1","     0"
"1","          36"
"1","
"
"1","                
"
"1","p.predcat       "
"1"," Norway"
"1"," Poland"
"1"," Portugal"
"1","   RSA"
"1"," Saudi Arabia"
"1"," Singapore"
"1"," Spain"
"1"," Sweden"
"1","
  France        "
"1","      0"
"1","      0"
"1","        0"
"1","     0"
"1","            0"
"1","         0"
"1","     0"
"1","      0"
"1","
  Germany       "
"1","      0"
"1","      0"
"1","        0"
"1","     0"
"1","            0"
"1","         0"
"1","     0"
"1","      0"
"1","
  United Kingdom"
"1","     71"
"1","      5"
"1","       66"
"1","     0"
"1","            0"
"1","         0"
"1","    91"
"1","     19"
"1","
"
"1","                
"
"1","p.predcat       "
"1"," Switzerland"
"1"," United Arab Emirates"
"1"," United Kingdom"
"1"," Unspecified"
"1","   USA"
"1","
  France        "
"1","           0"
"1","                    0"
"1","              0"
"1","           0"
"1","     0"
"1","
  Germany       "
"1","           0"
"1","                    0"
"1","              0"
"1","           0"
"1","     0"
"1","
  United Kingdom"
"1","          19"
"1","                    0"
"1","          13590"
"1","           0"
"1","     0"
"1","
"
"0","mean(p.predcat==df.test$Country)"
"1","[1]"
"1"," 0.9064667"
"1","
"
