data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Cargamos los datos:
data <- read.csv("data.csv")
summary(data)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
data$ParsedDate
class(data$ParsedDate)
head(data)
head(data)
View(data)
View(data)
#Comprobamos que no haya NA en el fichero
is.na(data)
#Comprobamos que no haya NA en el fichero
which(is.na(data))
#Comprobamos que no haya NA en el fichero
any(is.na(data))
anyNA(data)
?anyNA
#Tenemos NA
is.na(data)
#Tenemos NA
which(is.na(data))
summary(data)
class(data$InvoiceDate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Sustituimos los NA por 0
#Sustituimos los NA por 0
data %>%
filter(CustomerID == NA)
#Sustituimos los NA por 0
data %>%
filter(is.na(CustomerID)== T)
#Sustituimos los NA por 0
data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
summary(data)
#Si hay duplicados los eliminamos
data %>%
distinct()
#Si hay duplicados los eliminamos
data <- data %>%
distinct()
data$InvoiceDate[1]
data$InvoiceDate[2]
data$InvoiceDate
class(data$InvoiceNo)
class(data$StockCode)
class(data$Quantity)
class(data$UnitPrice)
class(data$CustomerID)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
View(data)
View(data)
data %>%
group_by(Description,Quantity)
data %>%
group_by(StockCode,Quantity)
data %>%
group_by(StockCode,Quantity) %>%
top_n(10,count)
data %>%
group_by(StockCode,Quantity) %>%
top_n(10,Quantity)
data %>%
top_n(10)
data %>%
group_by(Quantity)
data %>%
group_by(StockCode)
data %>%
group_by(StockCode) %>%
data[order(data$Quantity),]
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
data %>%
group_by(Quantity) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
data %>%
group_by(StockCode)
tail(data)
sales <- data %>%
group_by(StockCode)
sales[
with(sales, order(Quantity)),
]
sales <- data %>%
group_by(StockCode)
sales[
with(sales, order(-Quantity)),
]
sales <- data %>%
group_by(StockCode)
sales[
with(sales, order(Quantity)),
]
View(sales)
View(sales)
View(sales)
View(sales)
sales <- data %>%
select(StockCode, Description, Quantity)
sales <- data %>%
select(StockCode, Description, Quantity) %>%
group_by(StockCode)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode) %>%
summarise()
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode) %>%
summarise(StockCode)
View(sales)
View(sales)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode) %>%
summarise(n = n())
sales[
with(sales, order(Quantity)),
]
View(sales)
View(sales)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode)
View(sales)
View(sales)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode) %>%
table()
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
sales <- data %>%
select(StockCode, Description, Quantity, UnitPrice) %>%
group_by(StockCode, Description) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
sales <- data %>%
group_by(StockCode, Description) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
sales[
with(sales, order(Quantity)),
]
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
sales[
with(sales, order(Total)),
]
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
sales[
with(sales, order(-Total)),
]
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
sales[
with(sales, order(-Total)),
]
sales %>% top_n(10)
View(sales)
View(sales)
#Ordenamos de mayor a menor
sales <- sales[
with(sales, order(-Total)),
]
sales %>% top_n(10)
sales %>% top_n(10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Producto', y = 'Cantidad', title = 'Cantidad vendida de los top 10')
sales %>% top_n(10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los top 10')
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Delete all negative Quantity and Price. We also need to delete NA customer ID
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
data <- data %>%
drop_na()
anyNA(data)
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
sales %>% top_n(-10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los bottom 10')
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
#Ordenamos de mayor a menor
sales <- sales[
with(sales, order(-Total)),
]
sales %>% top_n(10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los top 10')
sales %>% top_n(-10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los bottom 10')
View(sales)
View(sales)
#Tenemos muchos productos que se han vendido solo una vez
sales$Total == 1
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total == 1)
View(sales)
View(sales)
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total == 80995)
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total == 1)
sales %>% top_n(-52) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los bottom 10')
library(lubridate)
data$weekDay <- wday(data$ParsedDate, label=TRUE)
data$weekDay <- factor(wday(ParsedDate),
levels = c(1,2,3,4,5,6,7),
labels = c("Domingo", "Lunes", "Martes", "Miercoles", "Jueves",
"Viernes", "Sabado")))
data$weekDay <- wday(data$ParsedDate, labels=c("Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"))
data$weekDay <- wday(data$ParsedDate, label=c("Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"))
data$weekDay <- wday(data$ParsedDate, labels=TRUE)
data$weekDay <- wday(data$ParsedDate, label=TRUE)
View(data)
View(data)
#Obtenemos el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
data$weekDay <- wday(data$ParsedDate, label=TRUE)
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
class(data$weekDay)
unique(data$weekDay)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
library(plyr)
library(plyr)
library(tidyverse)
library(lubridate)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
View(data)
View(data)
view(data)
View(data)
View(data)
class(data$weekDay)
unique(data$weekDay)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
unique(data$weekDay)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
data$weekDay <- revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
View(data)
View(data)
data$weekDay <- wday(data$ParsedDate, label=TRUE)
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(lubridate)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
data$weekDay <- revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total == 1) #En concreto 52
View(data)
View(data)
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
#Ordenamos de mayor a menor
sales <- sales[
with(sales, order(-Total)),
]
sales %>% top_n(10) %>%
ggplot(aes(x = StockCode, y = Total)) +
geom_col() +
labs(x = 'Código Stock', y = 'Cantidad', title = 'Cantidad vendida de los top 10')
View(data)
View(data)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
select(StockCode,Quantity) %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
select(StockCode,Quantity) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total == 1) #En concreto 52
#Quizás lo mejor sería eliminar estos productos del Stock
data$weekDay <- wday(data$ParsedDate, label=TRUE)
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data$weekDay
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a usar una funcion de plyr
#data$weekDay <- revalue(data$weekDay, c("mi\\."="Miercoles", "ju\\."="Jueves", "vi\\."="Viernes", "do\\."="Domingo", "lu\\."="Lunes", "ma\\."="Martes"))
