data$day <- day(data$ParsedDate)
#Añadimos una columna con el mes del año
data$month <- month(data$ParsedDate)
data %>%
group_by(month) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = month, y = revenue)) + geom_col() + labs(x = 'Mes', y = 'Beneficio (£)', title = 'Beneficio por mes')
class(data$month)
#Añadimos una columna con el mes del año
data$month <- month(data$ParsedDate, label = TRUE)
data %>%
group_by(month) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = month, y = revenue)) + geom_col() + labs(x = 'Mes', y = 'Beneficio (£)', title = 'Beneficio por mes')
class(data$month)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a renombrarlas
levels(data$weekDay) <- c("Dom","Lun","Mar","Mie","Jue","Vie","Sab")
#Añadimos una columna con el mes del año
data$month <- month(data$ParsedDate, label = TRUE)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
View(sales)
View(sales)
View(sales)
View(sales)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode, UnitPrice) %>%
summarise(Total = sum(Quantity))
#Detalle importante a tener en cuenta: El precio de los productos son menores si se compran en grandes cantidades:
data %>%
group_by(StockCode, UnitPrice)
#Detalle importante a tener en cuenta: El precio de los productos son menores si se compran en grandes cantidades:
data %>%
group_by(StockCode, UnitPrice) %>% head(10)
#Detalle importante a tener en cuenta: El precio de los productos son menores si se compran en grandes cantidades:
data %>%
group_by(StockCode, UnitPrice) %>%
summarise(Total = sum(Quantity)) %>% head(10)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
sales %>% top_n(10) %>% table()
sales %>% top_n(10)
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_tile("#FF7F7F", "#71CA97"),
Total = color_bar("lightgrey"),),
col.names = c("Código","Nº Vendido"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(formattable)
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_tile("#FF7F7F", "#71CA97"),
Total = color_bar("lightgrey"),),
col.names = c("Código","Nº Vendido"))
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_tile("#FF7F7F", "#71CA97"),
Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_tile("#FF7F7F", "#71CA97")),
col.names = c("Código","Nº Vendido"))
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
#Tenemos muchos productos que se han vendido solo una vez
sum(sales$Total > 10) #En concreto 52
#Quizás lo mejor sería eliminar estos productos del Stock
sales$Total > 10
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total > 10]
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total > 10,]
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total < 10,]
#Tenemos muchos productos que se han vendido menos de 10 veces
sum(sales$Total < 10) #En concreto 3306
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total < 10,]
#Total de productos vendidos, total clientes, total dinero ganado, facturas y paises
data %>% select(InvoiceNo, StockCode, Quantity, CustomerID, Country, lineTotal)
#Total de productos vendidos, total clientes, total dinero ganado, facturas y paises
data %>%
select(InvoiceNo, StockCode, Quantity, CustomerID, Country, lineTotal) %>%
summarise(Invoices = unique(InvoiceNo),
Stock = unique(StockCode),
Customers = sum(Quantity),
Countries = unique(Country),
Revenue = sum(lineTotal))
#Total de productos vendidos, total clientes, total dinero ganado, facturas y paises
data %>%
select(InvoiceNo, StockCode, Quantity, CustomerID, Country, lineTotal) %>%
group_by(StockCode) %>%
summarise(Invoices = unique(InvoiceNo),
Stock = unique(StockCode),
Customers = sum(Quantity),
Countries = unique(Country),
Revenue = sum(lineTotal))
data %>%
select(InvoiceNo, StockCode, Quantity, CustomerID, Country, lineTotal) %>%
group_by(StockCode)
data %>%
select(Quantity,lineTotal) %>%
rowSums()
data %>%
select(Quantity,lineTotal) %>%
colSums()
sums <- data %>%
select(Quantity,lineTotal) %>%
colSums()
unic <- data %>%
select(InvoiceNo, StockCode, CustomerID, Country) %>%
unic <- data %>%
select(InvoiceNo, StockCode, CustomerID, Country)
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country)
View(unic)
View(unic)
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% unique()
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) #%>% unique()
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% unique()
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% distinct()
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% summarise_all(n_distinct)
View(unic)
View(unic)
sums <- data %>%
select(Quantity,lineTotal) %>%
colSums()
sums <- data %>%
select(Quantity,lineTotal) %>%
summarise_all(sum)
View(sums)
View(sums)
sums <- data %>%
select(Quantity,lineTotal) %>%
colSums()
sums
sums <- data %>%
select(Quantity,lineTotal) %>%
summarise_all(sum)
View(sums)
View(sums)
totalStats <- merge(sums,unic)
View(totalStats)
View(totalStats)
totalStats <- t(merge(sums,unic))
View(totalStats)
View(totalStats)
table(totalStats)
totalStats
formattable(totalStats, align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
formattable(totalStats, align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
View(totalStats)
totalStats <- merge(sums,unic)
formattable(totalStats, align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
View(totalStats)
View(totalStats)
totalStats
totalStats %>% formattable()
totalStats %>% formattable(col.names = c("Volumen ventas","Beneficio obtenido", "Facturas emitidas","Nº de productos en Stock", "Clientes únicos", "Paises"))
totalStats %>% formattable(align = c("c", "c", "c", "c", "c", "c"),
col.names = c("Volumen ventas","Beneficio obtenido", "Facturas emitidas","Nº de productos en Stock", "Clientes únicos", "Paises"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(formattable)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a renombrarlas
levels(data$weekDay) <- c("Dom","Lun","Mar","Mie","Jue","Vie","Sab")
#Añadimos una columna con el mes del año
data$month <- month(data$ParsedDate, label = TRUE)
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
#Detalle importante a tener en cuenta: El precio de los productos son menores si se compran en grandes cantidades:
data %>%
group_by(StockCode, UnitPrice) %>%
summarise(Total = sum(Quantity)) %>% head(10)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
#Ordenamos de mayor a menor
sales <- sales[
with(sales, order(-Total)),
]
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
#Tenemos muchos productos que se han vendido menos de 10 veces
sum(sales$Total < 10) #En concreto 338
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total < 10,]
#Total de productos vendidos, total clientes, total dinero ganado, facturas y paises
#Sumamos las columnas de cantidades y beneficio
sums <- data %>%
select(Quantity,lineTotal) %>%
summarise_all(sum)
#Cogemos los valores únicos
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% summarise_all(n_distinct)
#Combinamos los dos dataframes
totalStats <- merge(sums,unic)
totalStats %>% formattable(align = c("c", "c", "c", "c", "c", "c"),
col.names = c("Volumen ventas","Beneficio obtenido", "Facturas emitidas","Nº de productos en Stock", "Clientes únicos", "Paises"))
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data %>%
group_by(month) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = month, y = revenue)) + geom_col() + labs(x = 'Mes', y = 'Beneficio (£)', title = 'Beneficio por mes')
#Tabla proporciones por pais
#Tabla absolutos
#Mapa regiones vendidas
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(formattable)
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana', col = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(formattable)
#Cargamos los datos:
data <- read.csv("data.csv")
class(data$InvoiceDate)
#A priori parace que solo tenemos problemas con la fecha de la factura que es leída como un string
data <- data %>%
mutate(
ParsedDate = parse_datetime(InvoiceDate, format = "%m/%d/%Y %H:%M")
)
#Comprobamos que no haya NA en el fichero
anyNA(data) #Tenemos NA
summary(data) #Solo hay NA's en CustomerID
#Borramos todos los precios y cantidades negativas
data <- data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
#Borramos los NA
data <- data %>%
drop_na()
#Sustituimos los NA por 0, son 135080 observaciones que pueden contener información interesante
#data$CustomerID <- ifelse(is.na(data$CustomerID)== TRUE,0,data$CustomerID)
#Si hay duplicados los eliminamos con la función de dplyr
data <- data %>%
distinct()
#Añadimos una columna con el precio total de cada venta:
data <- data %>% mutate(lineTotal = Quantity * UnitPrice)
#Añadimos una columna con el dia de la semana
data$weekDay <- wday(data$ParsedDate, label=TRUE)
#Como la etiquetas que genera automáticamente son horribles vamos a renombrarlas
levels(data$weekDay) <- c("Dom","Lun","Mar","Mie","Jue","Vie","Sab")
#Añadimos una columna con el mes del año
data$month <- month(data$ParsedDate, label = TRUE)
data %>%
group_by(StockCode) %>%
summarise(count = n(),
sum_quantity = sum(Quantity),
mean_quantity = round(mean(Quantity), 2),
median_quantity = median(Quantity),
mode_quantity = unique(Quantity)[which.max(tabulate(match(Quantity, unique(Quantity))))],
sd_quantity = round(sd(Quantity), 2))
#Detalle importante a tener en cuenta: El precio de los productos son menores si se compran en grandes cantidades:
data %>%
group_by(StockCode, UnitPrice) %>%
summarise(Total = sum(Quantity)) %>% head(10)
#Observamos la cantidad total vendida de cada producto
sales <- data %>%
group_by(StockCode) %>%
summarise(Total = sum(Quantity))
#Ordenamos de mayor a menor
sales <- sales[
with(sales, order(-Total)),
]
sales %>% top_n(10) %>%
formattable(align = c("l", "c"),
list(Total = color_bar("lightgrey")),
col.names = c("Código","Nº Vendido"))
#Tenemos muchos productos que se han vendido menos de 10 veces
sum(sales$Total < 10) #En concreto 338
#Quizás lo mejor sería eliminar estos productos del Stock
sales[sales$Total < 10,]
#Total de productos vendidos, total clientes, total dinero ganado, facturas y paises
#Sumamos las columnas de cantidades y beneficio
sums <- data %>%
select(Quantity,lineTotal) %>%
summarise_all(sum)
#Cogemos los valores únicos
unic <- data %>% select(InvoiceNo, StockCode, CustomerID, Country) %>% summarise_all(n_distinct)
#Combinamos los dos dataframes
totalStats <- merge(sums,unic)
totalStats %>% formattable(align = c("c", "c", "c", "c", "c", "c"),
col.names = c("Volumen ventas","Beneficio obtenido", "Facturas emitidas","Nº de productos en Stock", "Clientes únicos", "Paises"))
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana', col = "blue")
data %>%
group_by(month) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = month, y = revenue)) + geom_col() + labs(x = 'Mes', y = 'Beneficio (£)', title = 'Beneficio por mes')
#Tabla proporciones por pais
#Tabla absolutos
#Mapa regiones vendidas
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue, col = "blue")) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col() + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col(color='darkblue') + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data %>%
group_by(weekDay) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = weekDay, y = revenue)) + geom_col(fill='darkblue') + labs(x = 'Dia de la semana', y = 'Beneficio (£)', title = 'Beneficio por dia de la semana')
data %>%
group_by(month) %>%
summarise(revenue = sum(lineTotal)) %>%
ggplot(aes(x = month, y = revenue)) + geom_col(fill='darkblue') + labs(x = 'Mes', y = 'Beneficio (£)', title = 'Beneficio por mes')
?map_data
world_map <- map_data("world")
View(data)
View(data)
country <- data %>%
group_by(Country) %>%
summarise(SalesVolume = sum(Quantity))
View(country)
View(country)
#Mapa regiones vendidas
country <- data %>%
group_by(Country) %>%
summarise(SalesVolume = sum(Quantity))
world_map <- map_data("world")
salesmap <- left_join(country, world_map, by = "region")
View(world_map)
View(world_map)
View(country)
View(country)
country <- data %>%
group_by(Country) %>%
summarise(SalesVolume = sum(Quantity)) %>%
rename(Country = region)
#Mapa regiones vendidas
country <- data %>%
group_by(Country) %>%
summarise(SalesVolume = sum(Quantity)) %>%
rename(region = Country)
View(country)
View(country)
world_map <- map_data("world")
salesmap <- left_join(country, world_map, by = "region")
ggplot(salesmap, aes(long, lat, group = group))+
geom_polygon(aes(fill = SalesVolume ), color = "white")+
scale_fill_viridis_c(option = "C")
View(salesmap)
View(salesmap)
world_map <- map_data("world")
salesmap <- left_join(country, world_map, by = "region")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = salesmap,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = world_map,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
world_map <- map_data("world")
salesmap <- left_join(country, world_map, by = "region")
ggplot(data = salesmap) +
geom_sf(aes(fill = SalesQuantity)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt"))
ggplot(data = salesmap) +
geom_sf(aes(fill = SalesQuantity)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot(data = salesmap) +
geom_sf(aes(fill = SalesVolume)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = world_map,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = world_map, map = world_map
aes(long, lat, map_id = region),
salesmap <- left_join(country, world_map, by = "region")
ggplot(data = salesmap) +
geom_sf(aes(fill = SalesVolume)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = world,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
salesmap
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = salesmap,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
country$region <- ifelse(country$region == "United Kingdom", "UK",country$region)
world_map <- map_data("world")
salesmap <- left_join(country, world_map, by = "region")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = salesmap,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
world_map <- map_data("world")
salesmap <- full_join(country, world_map, by = "region")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = salesmap,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
unique(world_map$region)
country$region <- ifelse(country$region == "EIRE", "Ireland",country$region)
world_map <- map_data("world")
salesmap <- full_join(country, world_map, by = "region")
ggplot(salesmap, aes(map_id = region, fill = SalesVolume))+
geom_map(map = salesmap,  color = "white")+
expand_limits(x = salesmap$long, y = salesmap$lat)+
scale_fill_viridis_c(option = "C")
